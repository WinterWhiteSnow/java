package maze;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;
import java.util.StringTokenizer;


class location {
	int y;
	int x;
	int score;
	public location(int y, int x, int score) {
		super();
		this.y = y;
		this.x = x;
		this.score = score;
	}
}
//https://www.acmicpc.net/problem/2665
public class maze {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int[][] nList;
	static int[][] visit;
	static int[] dr = {-1,1,0,0};
	static int[] dc = {0,0,-1,1};
	static int n;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		n = Integer.parseInt(br.readLine());
		nList = new int[n][n];
		visit = new int[n][n];
		for (int y = 0; y< n; y ++) {
			for (int x=  0; x < n ; x ++) {
				visit[y][x]=Integer.MAX_VALUE;
			}
		}
		//기본값으로 Intger.max값
		for (int y = 0; y < n; y ++) {
			String temp = br.readLine();
			for (int x = 0; x < n; x ++) {
				char check = temp.charAt(x);
				if (check == '0') {
					nList[y][x] = 1;
				} else {
					nList[y][x]=0;
				}
			}
		}
		bfs();
		System.out.println(visit[n-1][n-1]);
	}
	
	public static void bfs() {
		Deque<location> queue = new ArrayDeque<>();
		queue.add(new location(0,0,0));
		while (! queue.isEmpty()) {
			location temp = queue.poll();
			for (int i = 0; i < 4; i ++) {
				int ny = temp.y+dr[i];
				int nx = temp.x+dc[i];
				if (rangeCheck(ny,nx)) { // 범위 내라서 이동해도 ok
					int score = temp.score+nList[ny][nx];
					if (score < visit[ny][nx]) { // 이전의 기록들보다 훨씬 간소화된 상태
						visit[ny][nx]=score;
						queue.add(new location(ny,nx,score));
					}
				}
			}
		}
	}
	
	public static boolean rangeCheck (int y, int x) {
		return 0<= y && y < n && 0<=x && x<n;
	}
}
