백엔드 1

Spring
의존성 
class location {
	ArrayList<location> nList; 
	location () {
		this.nList = new ArrayList<>();
	}
}
내가 자주쓰는 이런거,
class location은 ArrayList에 종속돼있다 <- 의존성
필요할때만 새로운 객체를 생성하면 좋으나, 그러지 않고 그냥 객체 생성할때마다 자동적으로 생성
=> 낭비 + 메모리 과부하 => 이걸 방지하기 위해서 Bean을 사용함

Bean = Spring의 객체들
기본적으로 예외를 설정하지 않는 이상은 Bean의 객체들은 싱글턴이 기본인 듯하다.(낭비방지를 위한 것도 있으니 당연한가?)
Component = 클래스
Bean = Configuration 클래스 내부에 메서드들을 선언
주로 Component는 내가 직접 작성한 클래스, 즉 쉽게 수정이 가능한 클래스에 선언하고
Bean은 외부 라이브러리, 내가 작성한게 아닌 가져다 쓰는걸 Bean로 선언한다... 라는 것 같음
주로 구글링해서 찾아보면 Conponent는 

솔직하게 그게 그렇게 큰 차이인지는 모르겠음.
예를들어 Object의 toString을 Person객체에 Override해서 사용한다고하면
물론, 원본은 바뀌지 않는 toString에서 시작되는 것이 맞기에 Bean이라는걸, 단순하게 생각하면 납득이되지만
그래도, Override해서 내 입맛대로 "바꿀 수 있으니까", 바뀐 시점에서 (원본이 미약하게 남아있더라도)
내 생각에는 이젠 다른 메서드라고 볼 수 있지 않을까? 라는 생각이 자꾸 들어서 쉽사리 납득이 안되는 주제이다.
문득 생각이 드는데, 그럼 overload한 메서드들은 다 각기 다르다고 볼 수 있을까?
나는 다르게 볼 수 있다고 생각하긴하는데, 여러가지로 혼란스럽다.

여전히 자바의 개념들이 잘 잡히지 않아 생긴 혼란인 것 같다.

qualifier = 딱 그 타입(객체)만 받겠다!

autowired = 생성자, setter, 필드(User user; <- 여기위에 선언) 의존성 주입해주는 명령어

Component 등록한 객체를 다른 객체에서 사용할때 Autowired를 사용
예를들어
Component한 Class A와 B 두개가 있고, B가 A를 갖다 쓴다고하면

@Component
class A {
}

@Component
class B {
	@Autowired
	private A a;
}
이런 방식으로 쓴다고 한다.
이것도 아직 개념적으로 잘 잡히지 않았음.

자바에 대한 개념도 아직 잘 안잡힌 상태에서 진도를 더 나아가니 더 혼란스럽기만하다.
그래도 차근차근 해봐야겠다.

 